cmake_minimum_required(VERSION 2.8)

set(PROJ "OgreENet")

project(${PROJ})

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/)

if(WIN32)
    set(CMAKE_MODULE_PATH "$ENV{OGRE_HOME}/CMake/;${CMAKE_MODULE_PATH}")
    set(OGRE_SAMPLES_INCLUDEPATH
        $ENV{OGRE_HOME}/Samples/include
    )
endif(WIN32)
 
if(UNIX)
    if(EXISTS "/usr/local/lib/OGRE/cmake")

      set(CMAKE_MODULE_PATH "/usr/local/lib/OGRE/cmake/;${CMAKE_MODULE_PATH}")
      set(OGRE_SAMPLES_INCLUDEPATH "/usr/local/share/OGRE/samples/Common/include/") # We could just *assume* that developers uses this basepath : /usr/local

    elseif(EXISTS "/usr/lib/OGRE/cmake")

      set(CMAKE_MODULE_PATH "/usr/lib/OGRE/cmake/;${CMAKE_MODULE_PATH}")
      set(OGRE_SAMPLES_INCLUDEPATH "/usr/share/OGRE/samples/Common/include/") # Otherwise, this one

    else ()
      message(SEND_ERROR "Failed to find module path.")
    endif(EXISTS "/usr/local/lib/OGRE/cmake")
endif(UNIX)

find_package(OGRE REQUIRED)
find_package(ENet REQUIRED)

set(ENet_INCLUDE_DIR include/OgreENet)

include_directories(${OGRE_INCLUDE_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}/include/OgreENet)

set(HDRS
    ${ENet_INCLUDE_DIR}/OgreENet.h
    ${ENet_INCLUDE_DIR}/OgreENetManager.h
)
 
set(SRCS
    ./OgreENet.cpp
    ./OgreENetManager.cpp
    ${HDRS}
)

add_library(${PROJ} ${SRCS})

set(INCLUDE_INSTALL_DIR include/${PROJ})

install(TARGETS ${PROJ}
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib)

set(LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib)
set(BIN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/bin)

install(FILES ${HDRS} DESTINATION ${INCLUDE_INSTALL_DIR})

install(FILES FindOgreENet.cmake DESTINATION lib/${PROJ}/cmake)

